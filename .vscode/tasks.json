{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "dev-backend",
            "runOptions": {
                // "runOn": "folderOpen"
            },
            "dependsOrder": "parallel",
            "dependsOn": [
                "ceramic",
                "graph-captable"
            ],
            "problemMatcher": []
        },
        {
            "label": "dev",
            "runOptions": {
                // "runOn": "folderOpen"
            },
            "dependsOrder": "parallel",
            "dependsOn": [
                "frontend",
                "graph-captable"
            ],
            "problemMatcher": []
        },
        {
            "label": "captable contracts",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm --filter @brok/captable start:contracts",
            "presentation": {
                "panel": "dedicated",
                "group": "contracts"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(TS\\d+)\\s*:\\s*(.*)$",
                    "file": 1,
                    "location": 2,
                    "severity": 3,
                    "code": 4,
                    "message": 5
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "change detected",
                    "endsPattern": "CapTableRegistry deployed"
                }
            }
        },
        {
            "label": "captable lib",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm --filter @brok/captable start:lib",
            "presentation": {
                "panel": "dedicated",
                "group": "contracts"
            },
            "dependsOn": [
                "captable contracts"
            ],
            "problemMatcher": [
                "$tsc-watch"
            ],
        },
        {
            "label": "ceramic",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm ceramic daemon --debug --network inmemory",
            "presentation": {
                "panel": "dedicated",
                "group": "ceramic"
            },
            "dependsOn": [
                "captable lib"
            ],
            "problemMatcher": {
                "pattern": {
                    "regexp": "^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(TS\\d+)\\s*:\\s*(.*)$",
                    "file": 1,
                    "location": 2,
                    "severity": 3,
                    "code": 4,
                    "message": 5
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Swarm listening",
                    "endsPattern": "Ceramic API running on"
                }
            }
        },
        {
            "label": "sdk",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm --filter @brok/sdk watch",
            "presentation": {
                "panel": "dedicated",
                "group": "sdk"
            },
            "dependsOn": [
                "ceramic"
            ],
            "problemMatcher": [
                "$tsc-watch"
            ],
        },
        {
            "label": "server-reddis",
            "type": "shell",
            "isBackground": true,
            "command": "make redis-stop && make redis-start",
            "presentation": {
                "panel": "dedicated",
                "group": "server"
            },
            // "dependsOn": [
            //     "sdk"
            // ],
            "problemMatcher": {
                "pattern": {
                    "regexp": "^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(TS\\d+)\\s*:\\s*(.*)$",
                    "file": 1,
                    "location": 2,
                    "severity": 3,
                    "code": 4,
                    "message": 5
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Swarm listening",
                    "endsPattern": "Ready to accept connections"
                }
            }
        },
        {
            "label": "server",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm -F @brok/demo-server init:db && DEBUG=brok* pnpm --filter @brok/demo-server start:dev",
            "presentation": {
                "panel": "dedicated",
                "group": "server"
            },
            "dependsOn": [
                "server-reddis",
                "sdk"
            ],
            "problemMatcher": [
                "$tsc-watch"
            ],
        },
        {
            "label": "frontend",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm --filter @brok/demo-frontend dev",
            "presentation": {
                "panel": "dedicated",
                "clear": true
            },
            "dependsOn": [
                "sdk"
            ],
            "problemMatcher": {
                "owner": "typescript",
                "pattern":    [
                    {
                      "regexp": ".",
                      "file": 1,
                      "location": 2,
                      "message": 3
                    }
                  ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Compiling",
                    "endsPattern": "compiled client and server successfully"
                }
            }
        },
        {
            "label": "graph-server",
            "type": "shell",
            "command": "docker compose -p symfoni_graph -f ops/docker/the-graph.yml down -v; rm -rf ops/docker/data; docker compose -p symfoni_graph -f ops/docker/the-graph.yml up",
            "presentation": {
                "panel": "dedicated",
                "group": "graph",
                "focus": true
            },
            "isBackground": true,
            "problemMatcher": {
                "pattern": [
                    {
                        "regexp": ".",
                        "file": 1,
                        "location": 2,
                        "message": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Apply migrations",
                    "endsPattern": "Starting GraphQL HTTP server",
                }
            },
        },
        {
            "label": "graph-captable",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm -F @brok/graph deploy:brokLocal",
            "presentation": {
                "panel": "dedicated",
                "group": "graph",
                "focus": true
            },
            "dependsOn": [
                "graph-server"
            ],
            "problemMatcher": {
                "pattern":    [
                    {
                      "regexp": ".",
                      "file": 1,
                      "location": 2,
                      "message": 3
                    }
                  ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Apply migrations",
                    "endsPattern": "Deployed to"
                }
            },
        },
    ]
}