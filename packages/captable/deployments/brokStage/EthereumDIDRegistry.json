{
  "address": "0x5b9Af7e5BC5EB4Df1e71EE1Dd6c2D599139c10e9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousChange",
          "type": "uint256"
        }
      ],
      "name": "DIDAttributeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousChange",
          "type": "uint256"
        }
      ],
      "name": "DIDDelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousChange",
          "type": "uint256"
        }
      ],
      "name": "DIDOwnerChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "addDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "addDelegateSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "addDelegateSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwnerSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwnerSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "changed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "identityOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "revokeAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "revokeAttributeSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "revokeAttributeSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegateSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "revokeDelegateSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "setAttributeSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        }
      ],
      "name": "setAttributeSigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "delegateType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "validDelegate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92bf479e6e1f35678d92be6d3c1c331bc81240862269abf8461bc88aaa7af9dd",
  "receipt": {
    "to": null,
    "from": "0xe0B6C61C5215C0Fc34982c9E982b46A301049A7e",
    "contractAddress": "0x5b9Af7e5BC5EB4Df1e71EE1Dd6c2D599139c10e9",
    "transactionIndex": 0,
    "gasUsed": "16578564",
    "logsBloom": "0x
    "blockHash": "0xb95c5621e672f31adcda781ed8fcf05ffe4707bf008ca43e0b67d5cabab93fe5",
    "transactionHash": "0x92bf479e6e1f35678d92be6d3c1c331bc81240862269abf8461bc88aaa7af9dd",
    "logs": [],
    "blockNumber": 10729055,
    "cumulativeGasUsed": "114704",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "04fd44f12852cc16cb485a1ab5c9ee06",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDAttributeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDDelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousChange\",\"type\":\"uint256\"}],\"name\":\"DIDOwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"addDelegateSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"addDelegateSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"identityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"revokeAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"revokeAttributeSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"revokeAttributeSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegateSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"revokeDelegateSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"setAttributeSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"}],\"name\":\"setAttributeSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"delegateType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"validDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dids/EthereumDIDRegistry.sol\":\"EthereumDIDRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/dids/EthereumDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n// Props to https://github.com/uport-project/ethr-did-registry/pull/33\\nimport \\\"./IERC1271.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract EthereumDIDRegistry {\\n    bytes4 internal constant _ERC1271_MAGICVALUE = 0x1626ba7e;\\n\\n    mapping(address => address) public owners;\\n    mapping(address => mapping(bytes32 => mapping(address => uint256)))\\n        public delegates;\\n    mapping(address => uint256) public changed;\\n    mapping(address => uint256) public nonce;\\n\\n    modifier onlyOwner(address identity, address actor) {\\n        require(actor == identityOwner(identity));\\n        _;\\n    }\\n\\n    event DIDOwnerChanged(\\n        address indexed identity,\\n        address owner,\\n        uint256 previousChange\\n    );\\n\\n    event DIDDelegateChanged(\\n        address indexed identity,\\n        bytes32 delegateType,\\n        address delegate,\\n        uint256 validTo,\\n        uint256 previousChange\\n    );\\n\\n    event DIDAttributeChanged(\\n        address indexed identity,\\n        bytes32 name,\\n        bytes value,\\n        uint256 validTo,\\n        uint256 previousChange\\n    );\\n\\n    function identityOwner(address identity) public view returns (address) {\\n        address owner = owners[identity];\\n        if (owner != address(0x0)) {\\n            return owner;\\n        }\\n        return identity;\\n    }\\n\\n    function checkSignature(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        bytes32 hash\\n    ) internal returns (address) {\\n        address signer = ecrecover(hash, sigV, sigR, sigS);\\n        require(signer == identityOwner(identity));\\n        nonce[signer]++;\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Checks if an identity's owner had provided a valid `_signature` for `_hash`.\\n     * If the identity's owner is a smart contract, the 'isValidSignature' will be called accourding to ERC1271 interface.\\n     *\\n     * @param _hash hash of the data signed//Arbitrary length data signed on the behalf of `identity`\\n     * @param _signature identity's signature(s) of the data\\n     */\\n    function checkSignature(\\n        address identity,\\n        bytes32 _hash,\\n        bytes memory _signature\\n    ) internal returns (address) {\\n        address owner = identityOwner(identity);\\n        bool isContract;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            isContract := gt(extcodesize(owner), 0)\\n        }\\n        if (isContract) {\\n            require(\\n                _ERC1271_MAGICVALUE ==\\n                    ERC1271(owner).isValidSignature(_hash, _signature)\\n            );\\n            nonce[owner]++;\\n            return owner;\\n        } else {\\n            address signer = ECDSA.recover(_hash, _signature);\\n            require(signer == identityOwner(identity));\\n            nonce[signer]++;\\n            return signer;\\n        }\\n    }\\n\\n    function validDelegate(\\n        address identity,\\n        bytes32 delegateType,\\n        address delegate\\n    ) public view returns (bool) {\\n        uint256 validity = delegates[identity][\\n            keccak256(abi.encodePacked(delegateType))\\n        ][delegate];\\n        return (validity > block.timestamp);\\n    }\\n\\n    function changeOwner(\\n        address identity,\\n        address actor,\\n        address newOwner\\n    ) internal onlyOwner(identity, actor) {\\n        owners[identity] = newOwner;\\n        emit DIDOwnerChanged(identity, newOwner, changed[identity]);\\n        changed[identity] = block.number;\\n    }\\n\\n    function changeOwner(address identity, address newOwner) public {\\n        changeOwner(identity, msg.sender, newOwner);\\n    }\\n\\n    function changeOwnerSigned(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        address newOwner\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"changeOwner\\\",\\n                newOwner\\n            )\\n        );\\n        changeOwner(\\n            identity,\\n            checkSignature(identity, sigV, sigR, sigS, hash),\\n            newOwner\\n        );\\n    }\\n\\n    function changeOwnerSigned(\\n        address identity,\\n        bytes memory signature,\\n        address newOwner\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"changeOwner\\\",\\n                newOwner\\n            )\\n        );\\n        changeOwner(\\n            identity,\\n            checkSignature(identity, hash, signature),\\n            newOwner\\n        );\\n    }\\n\\n    function addDelegate(\\n        address identity,\\n        address actor,\\n        bytes32 delegateType,\\n        address delegate,\\n        uint256 validity\\n    ) internal onlyOwner(identity, actor) {\\n        delegates[identity][keccak256(abi.encodePacked(delegateType))][\\n            delegate\\n        ] = block.timestamp + validity;\\n        emit DIDDelegateChanged(\\n            identity,\\n            delegateType,\\n            delegate,\\n            block.timestamp + validity,\\n            changed[identity]\\n        );\\n        changed[identity] = block.number;\\n    }\\n\\n    function addDelegate(\\n        address identity,\\n        bytes32 delegateType,\\n        address delegate,\\n        uint256 validity\\n    ) public {\\n        addDelegate(identity, msg.sender, delegateType, delegate, validity);\\n    }\\n\\n    function addDelegateSigned(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        bytes32 delegateType,\\n        address delegate,\\n        uint256 validity\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"addDelegate\\\",\\n                delegateType,\\n                delegate,\\n                validity\\n            )\\n        );\\n        addDelegate(\\n            identity,\\n            checkSignature(identity, sigV, sigR, sigS, hash),\\n            delegateType,\\n            delegate,\\n            validity\\n        );\\n    }\\n\\n    function addDelegateSigned(\\n        address identity,\\n        bytes memory signature,\\n        bytes32 delegateType,\\n        address delegate,\\n        uint256 validity\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"addDelegate\\\",\\n                delegateType,\\n                delegate,\\n                validity\\n            )\\n        );\\n        addDelegate(\\n            identity,\\n            checkSignature(identity, hash, signature),\\n            delegateType,\\n            delegate,\\n            validity\\n        );\\n    }\\n\\n    function revokeDelegate(\\n        address identity,\\n        address actor,\\n        bytes32 delegateType,\\n        address delegate\\n    ) internal onlyOwner(identity, actor) {\\n        delegates[identity][keccak256(abi.encodePacked(delegateType))][\\n            delegate\\n        ] = block.timestamp;\\n        emit DIDDelegateChanged(\\n            identity,\\n            delegateType,\\n            delegate,\\n            block.timestamp,\\n            changed[identity]\\n        );\\n        changed[identity] = block.number;\\n    }\\n\\n    function revokeDelegate(\\n        address identity,\\n        bytes32 delegateType,\\n        address delegate\\n    ) public {\\n        revokeDelegate(identity, msg.sender, delegateType, delegate);\\n    }\\n\\n    function revokeDelegateSigned(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        bytes32 delegateType,\\n        address delegate\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"revokeDelegate\\\",\\n                delegateType,\\n                delegate\\n            )\\n        );\\n        revokeDelegate(\\n            identity,\\n            checkSignature(identity, sigV, sigR, sigS, hash),\\n            delegateType,\\n            delegate\\n        );\\n    }\\n\\n    function revokeDelegateSigned(\\n        address identity,\\n        bytes memory signature,\\n        bytes32 delegateType,\\n        address delegate\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"revokeDelegate\\\",\\n                delegateType,\\n                delegate\\n            )\\n        );\\n        revokeDelegate(\\n            identity,\\n            checkSignature(identity, hash, signature),\\n            delegateType,\\n            delegate\\n        );\\n    }\\n\\n    function setAttribute(\\n        address identity,\\n        address actor,\\n        bytes32 name,\\n        bytes memory value,\\n        uint256 validity\\n    ) internal onlyOwner(identity, actor) {\\n        emit DIDAttributeChanged(\\n            identity,\\n            name,\\n            value,\\n            block.timestamp + validity,\\n            changed[identity]\\n        );\\n        changed[identity] = block.number;\\n    }\\n\\n    function setAttribute(\\n        address identity,\\n        bytes32 name,\\n        bytes memory value,\\n        uint256 validity\\n    ) public {\\n        setAttribute(identity, msg.sender, name, value, validity);\\n    }\\n\\n    function setAttributeSigned(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        bytes32 name,\\n        bytes memory value,\\n        uint256 validity\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"setAttribute\\\",\\n                name,\\n                value,\\n                validity\\n            )\\n        );\\n        setAttribute(\\n            identity,\\n            checkSignature(identity, sigV, sigR, sigS, hash),\\n            name,\\n            value,\\n            validity\\n        );\\n    }\\n\\n    function setAttributeSigned(\\n        address identity,\\n        bytes memory signature,\\n        bytes32 name,\\n        bytes memory value,\\n        uint256 validity\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"setAttribute\\\",\\n                name,\\n                value,\\n                validity\\n            )\\n        );\\n        setAttribute(\\n            identity,\\n            checkSignature(identity, hash, signature),\\n            name,\\n            value,\\n            validity\\n        );\\n    }\\n\\n    function revokeAttribute(\\n        address identity,\\n        address actor,\\n        bytes32 name,\\n        bytes memory value\\n    ) internal onlyOwner(identity, actor) {\\n        emit DIDAttributeChanged(identity, name, value, 0, changed[identity]);\\n        changed[identity] = block.number;\\n    }\\n\\n    function revokeAttribute(\\n        address identity,\\n        bytes32 name,\\n        bytes memory value\\n    ) public {\\n        revokeAttribute(identity, msg.sender, name, value);\\n    }\\n\\n    function revokeAttributeSigned(\\n        address identity,\\n        uint8 sigV,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        bytes32 name,\\n        bytes memory value\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"revokeAttribute\\\",\\n                name,\\n                value\\n            )\\n        );\\n        revokeAttribute(\\n            identity,\\n            checkSignature(identity, sigV, sigR, sigS, hash),\\n            name,\\n            value\\n        );\\n    }\\n\\n    function revokeAttributeSigned(\\n        address identity,\\n        bytes memory signature,\\n        bytes32 name,\\n        bytes memory value\\n    ) public {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0x19),\\n                bytes1(0),\\n                this,\\n                nonce[identityOwner(identity)],\\n                identity,\\n                \\\"revokeAttribute\\\",\\n                name,\\n                value\\n            )\\n        );\\n        revokeAttribute(\\n            identity,\\n            checkSignature(identity, hash, signature),\\n            name,\\n            value\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4691f880c21404c221cf833c53c7d3b6f6163ae175a605053e4ca6d356ab97c7\",\"license\":\"ISC\"},\"contracts/dids/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC-1271: Standard Signature Validation Method for Contracts\\n */\\nabstract contract ERC1271 {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _hash\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        public\\n        view\\n        virtual\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe70ad33e18106252f52bfc49a17d3c8b2b15633711dbe825c785b41053aee8a3\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506125d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e01c80637ad4b0a4116100d8578063a7068d661161008c578063f00d4b5d11610066578063f00d4b5d14610303578063f286182814610316578063f96d0f9f1461032957610176565b8063a7068d66146102ca578063bdb31f3b146102dd578063e476af5c146102f057610176565b80638733d4e8116100bd5780638733d4e81461029157806393072684146102a45780639c2c1b2b146102b757610176565b80637ad4b0a41461026b57806380b29f7c1461027e57610176565b806328b7b95e1161012f57806357d45c541161011457806357d45c5414610225578063622b2a3c1461023857806370ae92d21461025857610176565b806328b7b95e146101ff578063573b2cd81461021257610176565b80630d44625b116101605780630d44625b146101b9578063123b5e98146101d9578063240cf1fa146101ec57610176565b8062c023da1461017b578063022914a714610190575b600080fd5b61018e6101893660046119a0565b61033c565b005b6101a361019e3660046118d6565b61034d565b6040516101b091906122a9565b60405180910390f35b6101cc6101c7366004611922565b610375565b6040516101b091906122a0565b61018e6101e7366004611e0c565b610398565b61018e6101fa366004611c77565b61045a565b61018e61020d366004611a52565b610514565b61018e610220366004611bf4565b6105c4565b61018e610233366004611aa5565b610672565b61024b610246366004611922565b61072c565b6040516101b091906122f0565b6101cc6102663660046118d6565b6107d8565b61018e6102793660046119f5565b6107ea565b61018e61028c366004611922565b6107f7565b6101a361029f3660046118d6565b610803565b61018e6102b2366004611ccd565b610844565b61018e6102c5366004611d2b565b6108fb565b61018e6102d836600461195d565b6109b3565b61018e6102eb366004611b0b565b6109c0565b61018e6102fe366004611d94565b610a6e565b61018e6103113660046118f0565b610b23565b61018e610324366004611b79565b610b32565b6101cc6103373660046118d6565b610bde565b61034883338484610bf0565b505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600160209081526000938452604080852082529284528284209052825290205481565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826103c98d610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b88888860405160200161041f98979695949392919061212e565b604051602081830303815290604052805190602001209050610450886104488a8a8a8a87610cc4565b868686610d99565b5050505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261048b8b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489866040516020016104dd96959493929190611fda565b60405160208183030381529060405280519060200120905061050c866105068888888887610cc4565b84610e8f565b505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261054589610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054878660405160200161059796959493929190611fda565b6040516020818303038152906040528051906020012090506105be84610506868487610f94565b50505050565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826105f58b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548988888860405160200161064b98979695949392919061212e565b60405160208183030381529060405280519060200120905061050c86610448888489610f94565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826106a38a610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548887876040516020016106f797969594939291906121f6565b6040516020818303038152906040528051906020012090506107258561071e878488610f94565b858561116c565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160209081526040808320905183928391610766918891016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff87168252909152205442109150505b9392505050565b60036020526000908152604090205481565b6105be8433858585610d99565b6103488333848461116c565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260208190526040812054909116801561083a57905061083f565b829150505b919050565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826108758c610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a87876040516020016108c997969594939291906121f6565b6040516020818303038152906040528051906020012090506108f28761071e8989898987610cc4565b50505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261092c8d610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b88888860405160200161098298979695949392919061207e565b604051602081830303815290604052805190602001209050610450886109ab8a8a8a8a87610cc4565b868686611297565b6105be8433858585611297565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826109f18b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489888888604051602001610a4798979695949392919061207e565b60405160208183030381529060405280519060200120905061050c866109ab888489610f94565b60007f19000000000000000000000000000000000000000000000000000000000000008130600382610a9f8c610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a8787604051602001610af39796959493929190611f19565b6040516020818303038152906040528051906020012090506108f287610b1c8989898987610cc4565b8585610bf0565b610b2e823383610e8f565b5050565b60007f19000000000000000000000000000000000000000000000000000000000000008130600382610b638a610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054888787604051602001610bb79796959493929190611f19565b60405160208183030381529060405280519060200120905061072585610b1c878488610f94565b60026020526000908152604090205481565b8383610bfb82610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c3257600080fd5b73ffffffffffffffffffffffffffffffffffffffff86166000818152600260205260408082205490517f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e492610c8c9289928992919061234d565b60405180910390a250505073ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090204390555050565b60008060018387878760405160008152602001604052604051610cea9493929190612379565b6020604051602081039080840390855afa158015610d0c573d6000803e3d6000fd5b505050602060405103519050610d2187610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d5857600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805491610d8983612503565b9091555090979650505050505050565b8484610da482610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ddb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff87167f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e48686610e1f87426124bf565b73ffffffffffffffffffffffffffffffffffffffff8c1660009081526002602052604090819020549051610e56949392919061234d565b60405180910390a250505073ffffffffffffffffffffffffffffffffffffffff9093166000908152600260205260409020439055505050565b8282610e9a82610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed157600080fd5b73ffffffffffffffffffffffffffffffffffffffff85811660008181526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016958916959095179094556002905282902054915190917f38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a391610f5f9187916122ca565b60405180910390a25050505073ffffffffffffffffffffffffffffffffffffffff166000908152600260205260409020439055565b600080610fa085610803565b9050803b158015906110dd576040517f1626ba7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690631626ba7e90611000908890889060040161232c565b60206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190611e8f565b7fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e000000000000000000000000000000000000000000000000000000001461109d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054916110ce83612503565b919050555081925050506107d1565b60006110e986866113ed565b90506110f487610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461112b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040812080549161115c83612503565b91905055508093505050506107d1565b838361117782610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111ae57600080fd5b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602090815260408083209051429391926111e8918991016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff8089168352908352838220949094559289168084526002909152918190205490517f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f791610c8c91889188914291906122fb565b84846112a282610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112d957600080fd5b6112e383426124bf565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600160209081526040808320905190929161131c918a91016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff808a1683529252919091209190915587167f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f786866113b687426124bf565b73ffffffffffffffffffffffffffffffffffffffff8c1660009081526002602052604090819020549051610e5694939291906122fb565b60008060006113fc8585611411565b9150915061140981611481565b509392505050565b6000808251604114156114485760208301516040840151606085015160001a61143c8782858561169f565b9450945050505061147a565b82516040141561147257602083015160408401516114678683836117aa565b93509350505061147a565b506000905060025b9250929050565b60008160048111156114bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156114c75761169c565b6001816004811115611502577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612397565b60405180910390fd5b600281600481111561157e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156115b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a906123ce565b60038160048111156115f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612405565b6004816004811115611664577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612462565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116d657506000905060036117a1565b8460ff16601b141580156116ee57508460ff16601c14155b156116ff57506000905060046117a1565b6000600187878787604051600081526020016040526040516117249493929190612379565b6020604051602081039080840390855afa158015611746573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661179a576000600192509250506117a1565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816117e060ff86901c601b6124bf565b90506117ee8782888561169f565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461083f57600080fd5b600082601f830112611830578081fd5b813567ffffffffffffffff8082111561184b5761184b61256b565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156118915761189161256b565b816040528381528660208588010111156118a9578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff8116811461083f57600080fd5b6000602082840312156118e7578081fd5b6107d1826117fc565b60008060408385031215611902578081fd5b61190b836117fc565b9150611919602084016117fc565b90509250929050565b600080600060608486031215611936578081fd5b61193f846117fc565b925060208401359150611954604085016117fc565b90509250925092565b60008060008060808587031215611972578081fd5b61197b856117fc565b935060208501359250611990604086016117fc565b9396929550929360600135925050565b6000806000606084860312156119b4578283fd5b6119bd846117fc565b925060208401359150604084013567ffffffffffffffff8111156119df578182fd5b6119eb86828701611820565b9150509250925092565b60008060008060808587031215611a0a578384fd5b611a13856117fc565b935060208501359250604085013567ffffffffffffffff811115611a35578283fd5b611a4187828801611820565b949793965093946060013593505050565b600080600060608486031215611a66578283fd5b611a6f846117fc565b9250602084013567ffffffffffffffff811115611a8a578283fd5b611a9686828701611820565b925050611954604085016117fc565b60008060008060808587031215611aba578384fd5b611ac3856117fc565b9350602085013567ffffffffffffffff811115611ade578384fd5b611aea87828801611820565b93505060408501359150611b00606086016117fc565b905092959194509250565b600080600080600060a08688031215611b22578081fd5b611b2b866117fc565b9450602086013567ffffffffffffffff811115611b46578182fd5b611b5288828901611820565b94505060408601359250611b68606087016117fc565b949793965091946080013592915050565b60008060008060808587031215611b8e578384fd5b611b97856117fc565b9350602085013567ffffffffffffffff80821115611bb3578485fd5b611bbf88838901611820565b9450604087013593506060870135915080821115611bdb578283fd5b50611be887828801611820565b91505092959194509250565b600080600080600060a08688031215611c0b578283fd5b611c14866117fc565b9450602086013567ffffffffffffffff80821115611c30578485fd5b611c3c89838a01611820565b9550604088013594506060880135915080821115611c58578283fd5b50611c6588828901611820565b95989497509295608001359392505050565b600080600080600060a08688031215611c8e578283fd5b611c97866117fc565b9450611ca5602087016118c5565b93506040860135925060608601359150611cc1608087016117fc565b90509295509295909350565b60008060008060008060c08789031215611ce5578384fd5b611cee876117fc565b9550611cfc602088016118c5565b9450604087013593506060870135925060808701359150611d1f60a088016117fc565b90509295509295509295565b600080600080600080600060e0888a031215611d45578485fd5b611d4e886117fc565b9650611d5c602089016118c5565b9550604088013594506060880135935060808801359250611d7f60a089016117fc565b915060c0880135905092959891949750929550565b60008060008060008060c08789031215611dac578384fd5b611db5876117fc565b9550611dc3602088016118c5565b945060408701359350606087013592506080870135915060a087013567ffffffffffffffff811115611df3578182fd5b611dff89828a01611820565b9150509295509295509295565b600080600080600080600060e0888a031215611e26578081fd5b611e2f886117fc565b9650611e3d602089016118c5565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115611e6d578182fd5b611e798a828b01611820565b92505060c0880135905092959891949750929550565b600060208284031215611ea0578081fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146107d1578182fd5b60008151808452611ee78160208601602086016124d7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fff00000000000000000000000000000000000000000000000000000000000000808a1683528089166001840152507fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808860601b166002840152866016840152808660601b166036840152507f7265766f6b654174747269627574650000000000000000000000000000000000604a8301528360598301528251611fc78160798501602087016124d7565b9190910160790198975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000096871681529490951660018501527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811660028601526016850192909252821b811660368401527f6368616e67654f776e6572000000000000000000000000000000000000000000604a84015292901b909116605582015260690190565b7fff0000000000000000000000000000000000000000000000000000000000000098891681529690971660018701527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166002880152601687019490945291841b831660368601527f61646444656c6567617465000000000000000000000000000000000000000000604a860152605585015290911b166075820152608981019190915260a90190565b60007fff00000000000000000000000000000000000000000000000000000000000000808b168352808a166001840152507fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808960601b166002840152876016840152808760601b166036840152507f7365744174747269627574650000000000000000000000000000000000000000604a83015284605683015283516121dc8160768501602088016124d7565b607692019182019290925260960198975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000097881681529590961660018601527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b81166002870152601686019390935290831b821660368501527f7265766f6b6544656c6567617465000000000000000000000000000000000000604a850152605884015292901b9091166078820152608c0190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b6000838252604060208301526123456040830184611ecf565b949350505050565b6000858252608060208301526123666080830186611ecf565b6040830194909452506060015292915050565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b600082198211156124d2576124d261253c565b500190565b60005b838110156124f25781810151838201526020016124da565b838111156105be5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156125355761253561253c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212201fe55dead114afa6733de4e9d80e12b7d452ab081c1016008a751781ea0983a464736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101765760003560e01c80637ad4b0a4116100d8578063a7068d661161008c578063f00d4b5d11610066578063f00d4b5d14610303578063f286182814610316578063f96d0f9f1461032957610176565b8063a7068d66146102ca578063bdb31f3b146102dd578063e476af5c146102f057610176565b80638733d4e8116100bd5780638733d4e81461029157806393072684146102a45780639c2c1b2b146102b757610176565b80637ad4b0a41461026b57806380b29f7c1461027e57610176565b806328b7b95e1161012f57806357d45c541161011457806357d45c5414610225578063622b2a3c1461023857806370ae92d21461025857610176565b806328b7b95e146101ff578063573b2cd81461021257610176565b80630d44625b116101605780630d44625b146101b9578063123b5e98146101d9578063240cf1fa146101ec57610176565b8062c023da1461017b578063022914a714610190575b600080fd5b61018e6101893660046119a0565b61033c565b005b6101a361019e3660046118d6565b61034d565b6040516101b091906122a9565b60405180910390f35b6101cc6101c7366004611922565b610375565b6040516101b091906122a0565b61018e6101e7366004611e0c565b610398565b61018e6101fa366004611c77565b61045a565b61018e61020d366004611a52565b610514565b61018e610220366004611bf4565b6105c4565b61018e610233366004611aa5565b610672565b61024b610246366004611922565b61072c565b6040516101b091906122f0565b6101cc6102663660046118d6565b6107d8565b61018e6102793660046119f5565b6107ea565b61018e61028c366004611922565b6107f7565b6101a361029f3660046118d6565b610803565b61018e6102b2366004611ccd565b610844565b61018e6102c5366004611d2b565b6108fb565b61018e6102d836600461195d565b6109b3565b61018e6102eb366004611b0b565b6109c0565b61018e6102fe366004611d94565b610a6e565b61018e6103113660046118f0565b610b23565b61018e610324366004611b79565b610b32565b6101cc6103373660046118d6565b610bde565b61034883338484610bf0565b505050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600160209081526000938452604080852082529284528284209052825290205481565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826103c98d610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b88888860405160200161041f98979695949392919061212e565b604051602081830303815290604052805190602001209050610450886104488a8a8a8a87610cc4565b868686610d99565b5050505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261048b8b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489866040516020016104dd96959493929190611fda565b60405160208183030381529060405280519060200120905061050c866105068888888887610cc4565b84610e8f565b505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261054589610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054878660405160200161059796959493929190611fda565b6040516020818303038152906040528051906020012090506105be84610506868487610f94565b50505050565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826105f58b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548988888860405160200161064b98979695949392919061212e565b60405160208183030381529060405280519060200120905061050c86610448888489610f94565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826106a38a610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548887876040516020016106f797969594939291906121f6565b6040516020818303038152906040528051906020012090506107258561071e878488610f94565b858561116c565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160209081526040808320905183928391610766918891016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff87168252909152205442109150505b9392505050565b60036020526000908152604090205481565b6105be8433858585610d99565b6103488333848461116c565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260208190526040812054909116801561083a57905061083f565b829150505b919050565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826108758c610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a87876040516020016108c997969594939291906121f6565b6040516020818303038152906040528051906020012090506108f28761071e8989898987610cc4565b50505050505050565b60007f1900000000000000000000000000000000000000000000000000000000000000813060038261092c8d610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548b88888860405160200161098298979695949392919061207e565b604051602081830303815290604052805190602001209050610450886109ab8a8a8a8a87610cc4565b868686611297565b6105be8433858585611297565b60007f190000000000000000000000000000000000000000000000000000000000000081306003826109f18b610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205489888888604051602001610a4798979695949392919061207e565b60405160208183030381529060405280519060200120905061050c866109ab888489610f94565b60007f19000000000000000000000000000000000000000000000000000000000000008130600382610a9f8c610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548a8787604051602001610af39796959493929190611f19565b6040516020818303038152906040528051906020012090506108f287610b1c8989898987610cc4565b8585610bf0565b610b2e823383610e8f565b5050565b60007f19000000000000000000000000000000000000000000000000000000000000008130600382610b638a610803565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054888787604051602001610bb79796959493929190611f19565b60405160208183030381529060405280519060200120905061072585610b1c878488610f94565b60026020526000908152604090205481565b8383610bfb82610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c3257600080fd5b73ffffffffffffffffffffffffffffffffffffffff86166000818152600260205260408082205490517f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e492610c8c9289928992919061234d565b60405180910390a250505073ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090204390555050565b60008060018387878760405160008152602001604052604051610cea9493929190612379565b6020604051602081039080840390855afa158015610d0c573d6000803e3d6000fd5b505050602060405103519050610d2187610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d5857600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805491610d8983612503565b9091555090979650505050505050565b8484610da482610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ddb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff87167f18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e48686610e1f87426124bf565b73ffffffffffffffffffffffffffffffffffffffff8c1660009081526002602052604090819020549051610e56949392919061234d565b60405180910390a250505073ffffffffffffffffffffffffffffffffffffffff9093166000908152600260205260409020439055505050565b8282610e9a82610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ed157600080fd5b73ffffffffffffffffffffffffffffffffffffffff85811660008181526020818152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000016958916959095179094556002905282902054915190917f38a5a6e68f30ed1ab45860a4afb34bcb2fc00f22ca462d249b8a8d40cda6f7a391610f5f9187916122ca565b60405180910390a25050505073ffffffffffffffffffffffffffffffffffffffff166000908152600260205260409020439055565b600080610fa085610803565b9050803b158015906110dd576040517f1626ba7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690631626ba7e90611000908890889060040161232c565b60206040518083038186803b15801561101857600080fd5b505afa15801561102c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110509190611e8f565b7fffffffff00000000000000000000000000000000000000000000000000000000167f1626ba7e000000000000000000000000000000000000000000000000000000001461109d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054916110ce83612503565b919050555081925050506107d1565b60006110e986866113ed565b90506110f487610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461112b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040812080549161115c83612503565b91905055508093505050506107d1565b838361117782610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111ae57600080fd5b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602090815260408083209051429391926111e8918991016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff8089168352908352838220949094559289168084526002909152918190205490517f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f791610c8c91889188914291906122fb565b84846112a282610803565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112d957600080fd5b6112e383426124bf565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600160209081526040808320905190929161131c918a91016122a0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181528151602092830120835282820193909352908201600090812073ffffffffffffffffffffffffffffffffffffffff808a1683529252919091209190915587167f5a5084339536bcab65f20799fcc58724588145ca054bd2be626174b27ba156f786866113b687426124bf565b73ffffffffffffffffffffffffffffffffffffffff8c1660009081526002602052604090819020549051610e5694939291906122fb565b60008060006113fc8585611411565b9150915061140981611481565b509392505050565b6000808251604114156114485760208301516040840151606085015160001a61143c8782858561169f565b9450945050505061147a565b82516040141561147257602083015160408401516114678683836117aa565b93509350505061147a565b506000905060025b9250929050565b60008160048111156114bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156114c75761169c565b6001816004811115611502577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612397565b60405180910390fd5b600281600481111561157e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156115b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a906123ce565b60038160048111156115f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612405565b6004816004811115611664577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a90612462565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156116d657506000905060036117a1565b8460ff16601b141580156116ee57508460ff16601c14155b156116ff57506000905060046117a1565b6000600187878787604051600081526020016040526040516117249493929190612379565b6020604051602081039080840390855afa158015611746573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661179a576000600192509250506117a1565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816117e060ff86901c601b6124bf565b90506117ee8782888561169f565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461083f57600080fd5b600082601f830112611830578081fd5b813567ffffffffffffffff8082111561184b5761184b61256b565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156118915761189161256b565b816040528381528660208588010111156118a9578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff8116811461083f57600080fd5b6000602082840312156118e7578081fd5b6107d1826117fc565b60008060408385031215611902578081fd5b61190b836117fc565b9150611919602084016117fc565b90509250929050565b600080600060608486031215611936578081fd5b61193f846117fc565b925060208401359150611954604085016117fc565b90509250925092565b60008060008060808587031215611972578081fd5b61197b856117fc565b935060208501359250611990604086016117fc565b9396929550929360600135925050565b6000806000606084860312156119b4578283fd5b6119bd846117fc565b925060208401359150604084013567ffffffffffffffff8111156119df578182fd5b6119eb86828701611820565b9150509250925092565b60008060008060808587031215611a0a578384fd5b611a13856117fc565b935060208501359250604085013567ffffffffffffffff811115611a35578283fd5b611a4187828801611820565b949793965093946060013593505050565b600080600060608486031215611a66578283fd5b611a6f846117fc565b9250602084013567ffffffffffffffff811115611a8a578283fd5b611a9686828701611820565b925050611954604085016117fc565b60008060008060808587031215611aba578384fd5b611ac3856117fc565b9350602085013567ffffffffffffffff811115611ade578384fd5b611aea87828801611820565b93505060408501359150611b00606086016117fc565b905092959194509250565b600080600080600060a08688031215611b22578081fd5b611b2b866117fc565b9450602086013567ffffffffffffffff811115611b46578182fd5b611b5288828901611820565b94505060408601359250611b68606087016117fc565b949793965091946080013592915050565b60008060008060808587031215611b8e578384fd5b611b97856117fc565b9350602085013567ffffffffffffffff80821115611bb3578485fd5b611bbf88838901611820565b9450604087013593506060870135915080821115611bdb578283fd5b50611be887828801611820565b91505092959194509250565b600080600080600060a08688031215611c0b578283fd5b611c14866117fc565b9450602086013567ffffffffffffffff80821115611c30578485fd5b611c3c89838a01611820565b9550604088013594506060880135915080821115611c58578283fd5b50611c6588828901611820565b95989497509295608001359392505050565b600080600080600060a08688031215611c8e578283fd5b611c97866117fc565b9450611ca5602087016118c5565b93506040860135925060608601359150611cc1608087016117fc565b90509295509295909350565b60008060008060008060c08789031215611ce5578384fd5b611cee876117fc565b9550611cfc602088016118c5565b9450604087013593506060870135925060808701359150611d1f60a088016117fc565b90509295509295509295565b600080600080600080600060e0888a031215611d45578485fd5b611d4e886117fc565b9650611d5c602089016118c5565b9550604088013594506060880135935060808801359250611d7f60a089016117fc565b915060c0880135905092959891949750929550565b60008060008060008060c08789031215611dac578384fd5b611db5876117fc565b9550611dc3602088016118c5565b945060408701359350606087013592506080870135915060a087013567ffffffffffffffff811115611df3578182fd5b611dff89828a01611820565b9150509295509295509295565b600080600080600080600060e0888a031215611e26578081fd5b611e2f886117fc565b9650611e3d602089016118c5565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115611e6d578182fd5b611e798a828b01611820565b92505060c0880135905092959891949750929550565b600060208284031215611ea0578081fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146107d1578182fd5b60008151808452611ee78160208601602086016124d7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60007fff00000000000000000000000000000000000000000000000000000000000000808a1683528089166001840152507fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808860601b166002840152866016840152808660601b166036840152507f7265766f6b654174747269627574650000000000000000000000000000000000604a8301528360598301528251611fc78160798501602087016124d7565b9190910160790198975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000096871681529490951660018501527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811660028601526016850192909252821b811660368401527f6368616e67654f776e6572000000000000000000000000000000000000000000604a84015292901b909116605582015260690190565b7fff0000000000000000000000000000000000000000000000000000000000000098891681529690971660018701527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606095861b81166002880152601687019490945291841b831660368601527f61646444656c6567617465000000000000000000000000000000000000000000604a860152605585015290911b166075820152608981019190915260a90190565b60007fff00000000000000000000000000000000000000000000000000000000000000808b168352808a166001840152507fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808960601b166002840152876016840152808760601b166036840152507f7365744174747269627574650000000000000000000000000000000000000000604a83015284605683015283516121dc8160768501602088016124d7565b607692019182019290925260960198975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000097881681529590961660018601527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b81166002870152601686019390935290831b821660368501527f7265766f6b6544656c6567617465000000000000000000000000000000000000604a850152605884015292901b9091166078820152608c0190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b93845273ffffffffffffffffffffffffffffffffffffffff9290921660208401526040830152606082015260800190565b6000838252604060208301526123456040830184611ecf565b949350505050565b6000858252608060208301526123666080830186611ecf565b6040830194909452506060015292915050565b93845260ff9290921660208401526040830152606082015260800190565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b600082198211156124d2576124d261253c565b500190565b60005b838110156124f25781810151838201526020016124da565b838111156105be5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156125355761253561253c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212201fe55dead114afa6733de4e9d80e12b7d452ab081c1016008a751781ea0983a464736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9674,
        "contract": "contracts/dids/EthereumDIDRegistry.sol:EthereumDIDRegistry",
        "label": "owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9682,
        "contract": "contracts/dids/EthereumDIDRegistry.sol:EthereumDIDRegistry",
        "label": "delegates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 9686,
        "contract": "contracts/dids/EthereumDIDRegistry.sol:EthereumDIDRegistry",
        "label": "changed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9690,
        "contract": "contracts/dids/EthereumDIDRegistry.sol:EthereumDIDRegistry",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}