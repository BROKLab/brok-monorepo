// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalByPartition extends ethereum.Event {
  get params(): ApprovalByPartition__Params {
    return new ApprovalByPartition__Params(this);
  }
}

export class ApprovalByPartition__Params {
  _event: ApprovalByPartition;

  constructor(event: ApprovalByPartition) {
    this._event = event;
  }

  get partition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuthorizedOperator extends ethereum.Event {
  get params(): AuthorizedOperator__Params {
    return new AuthorizedOperator__Params(this);
  }
}

export class AuthorizedOperator__Params {
  _event: AuthorizedOperator;

  constructor(event: AuthorizedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuthorizedOperatorByPartition extends ethereum.Event {
  get params(): AuthorizedOperatorByPartition__Params {
    return new AuthorizedOperatorByPartition__Params(this);
  }
}

export class AuthorizedOperatorByPartition__Params {
  _event: AuthorizedOperatorByPartition;

  constructor(event: AuthorizedOperatorByPartition) {
    this._event = event;
  }

  get partition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CaptableChangedFagsystem extends ethereum.Event {
  get params(): CaptableChangedFagsystem__Params {
    return new CaptableChangedFagsystem__Params(this);
  }
}

export class CaptableChangedFagsystem__Params {
  _event: CaptableChangedFagsystem;

  constructor(event: CaptableChangedFagsystem) {
    this._event = event;
  }

  get orgnr(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldFagsystem(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newFagsystem(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ChangedPartition extends ethereum.Event {
  get params(): ChangedPartition__Params {
    return new ChangedPartition__Params(this);
  }
}

export class ChangedPartition__Params {
  _event: ChangedPartition;

  constructor(event: ChangedPartition) {
    this._event = event;
  }

  get fromPartition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get toPartition(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DocumentRemoved extends ethereum.Event {
  get params(): DocumentRemoved__Params {
    return new DocumentRemoved__Params(this);
  }
}

export class DocumentRemoved__Params {
  _event: DocumentRemoved;

  constructor(event: DocumentRemoved) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }

  get documentHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DocumentUpdated extends ethereum.Event {
  get params(): DocumentUpdated__Params {
    return new DocumentUpdated__Params(this);
  }
}

export class DocumentUpdated__Params {
  _event: DocumentUpdated;

  constructor(event: DocumentUpdated) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }

  get documentHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Issued extends ethereum.Event {
  get params(): Issued__Params {
    return new Issued__Params(this);
  }
}

export class Issued__Params {
  _event: Issued;

  constructor(event: Issued) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class IssuedByPartition extends ethereum.Event {
  get params(): IssuedByPartition__Params {
    return new IssuedByPartition__Params(this);
  }
}

export class IssuedByPartition__Params {
  _event: IssuedByPartition;

  constructor(event: IssuedByPartition) {
    this._event = event;
  }

  get partition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class MinterAdded extends ethereum.Event {
  get params(): MinterAdded__Params {
    return new MinterAdded__Params(this);
  }
}

export class MinterAdded__Params {
  _event: MinterAdded;

  constructor(event: MinterAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterRemoved extends ethereum.Event {
  get params(): MinterRemoved__Params {
    return new MinterRemoved__Params(this);
  }
}

export class MinterRemoved__Params {
  _event: MinterRemoved;

  constructor(event: MinterRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewCapTable extends ethereum.Event {
  get params(): NewCapTable__Params {
    return new NewCapTable__Params(this);
  }
}

export class NewCapTable__Params {
  _event: NewCapTable;

  constructor(event: NewCapTable) {
    this._event = event;
  }

  get orgnr(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fagsystem(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RedeemedByPartition extends ethereum.Event {
  get params(): RedeemedByPartition__Params {
    return new RedeemedByPartition__Params(this);
  }
}

export class RedeemedByPartition__Params {
  _event: RedeemedByPartition;

  constructor(event: RedeemedByPartition) {
    this._event = event;
  }

  get partition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get operatorData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class RevokedOperator extends ethereum.Event {
  get params(): RevokedOperator__Params {
    return new RevokedOperator__Params(this);
  }
}

export class RevokedOperator__Params {
  _event: RevokedOperator;

  constructor(event: RevokedOperator) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokedOperatorByPartition extends ethereum.Event {
  get params(): RevokedOperatorByPartition__Params {
    return new RevokedOperatorByPartition__Params(this);
  }
}

export class RevokedOperatorByPartition__Params {
  _event: RevokedOperatorByPartition;

  constructor(event: RevokedOperatorByPartition) {
    this._event = event;
  }

  get partition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferByPartition extends ethereum.Event {
  get params(): TransferByPartition__Params {
    return new TransferByPartition__Params(this);
  }
}

export class TransferByPartition__Params {
  _event: TransferByPartition;

  constructor(event: TransferByPartition) {
    this._event = event;
  }

  get fromPartition(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class CapTable__getDocumentResult {
  value0: string;
  value1: Bytes;
  value2: BigInt;

  constructor(value0: string, value1: Bytes, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class CapTable extends ethereum.SmartContract {
  static bind(address: Address): CapTable {
    return new CapTable("CapTable", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowanceByPartition(
    partition: Bytes,
    owner: Address,
    spender: Address
  ): BigInt {
    let result = super.call(
      "allowanceByPartition",
      "allowanceByPartition(bytes32,address,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowanceByPartition(
    partition: Bytes,
    owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowanceByPartition",
      "allowanceByPartition(bytes32,address,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveByPartition(
    partition: Bytes,
    spender: Address,
    value: BigInt
  ): boolean {
    let result = super.call(
      "approveByPartition",
      "approveByPartition(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_approveByPartition(
    partition: Bytes,
    spender: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveByPartition",
      "approveByPartition(bytes32,address,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(tokenHolder: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenHolder)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(tokenHolder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenHolder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfByPartition(partition: Bytes, tokenHolder: Address): BigInt {
    let result = super.call(
      "balanceOfByPartition",
      "balanceOfByPartition(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfByPartition(
    partition: Bytes,
    tokenHolder: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfByPartition",
      "balanceOfByPartition(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    param1: Address
  ): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    param1: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  controllers(): Array<Address> {
    let result = super.call("controllers", "controllers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_controllers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("controllers", "controllers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  controllersByPartition(partition: Bytes): Array<Address> {
    let result = super.call(
      "controllersByPartition",
      "controllersByPartition(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(partition)]
    );

    return result[0].toAddressArray();
  }

  try_controllersByPartition(
    partition: Bytes
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "controllersByPartition",
      "controllersByPartition(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(partition)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  domainName(): string {
    let result = super.call("domainName", "domainName():(string)", []);

    return result[0].toString();
  }

  try_domainName(): ethereum.CallResult<string> {
    let result = super.tryCall("domainName", "domainName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  domainVersion(): string {
    let result = super.call("domainVersion", "domainVersion():(string)", []);

    return result[0].toString();
  }

  try_domainVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("domainVersion", "domainVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  generateDomainSeparator(): Bytes {
    let result = super.call(
      "generateDomainSeparator",
      "generateDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_generateDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "generateDomainSeparator",
      "generateDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllDocuments(): Array<Bytes> {
    let result = super.call(
      "getAllDocuments",
      "getAllDocuments():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getAllDocuments(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllDocuments",
      "getAllDocuments():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDefaultPartitions(): Array<Bytes> {
    let result = super.call(
      "getDefaultPartitions",
      "getDefaultPartitions():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getDefaultPartitions(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDefaultPartitions",
      "getDefaultPartitions():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDocument(documentName: Bytes): CapTable__getDocumentResult {
    let result = super.call(
      "getDocument",
      "getDocument(bytes32):(string,bytes32,uint256)",
      [ethereum.Value.fromFixedBytes(documentName)]
    );

    return new CapTable__getDocumentResult(
      result[0].toString(),
      result[1].toBytes(),
      result[2].toBigInt()
    );
  }

  try_getDocument(
    documentName: Bytes
  ): ethereum.CallResult<CapTable__getDocumentResult> {
    let result = super.tryCall(
      "getDocument",
      "getDocument(bytes32):(string,bytes32,uint256)",
      [ethereum.Value.fromFixedBytes(documentName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CapTable__getDocumentResult(
        value[0].toString(),
        value[1].toBytes(),
        value[2].toBigInt()
      )
    );
  }

  getFagsystem(): Address {
    let result = super.call("getFagsystem", "getFagsystem():(address)", []);

    return result[0].toAddress();
  }

  try_getFagsystem(): ethereum.CallResult<Address> {
    let result = super.tryCall("getFagsystem", "getFagsystem():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFagsystemDid(): string {
    let result = super.call(
      "getFagsystemDid",
      "getFagsystemDid():(string)",
      []
    );

    return result[0].toString();
  }

  try_getFagsystemDid(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getFagsystemDid",
      "getFagsystemDid():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getOrgnr(): string {
    let result = super.call("getOrgnr", "getOrgnr():(string)", []);

    return result[0].toString();
  }

  try_getOrgnr(): ethereum.CallResult<string> {
    let result = super.tryCall("getOrgnr", "getOrgnr():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  granularity(): BigInt {
    let result = super.call("granularity", "granularity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_granularity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("granularity", "granularity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isControllable(): boolean {
    let result = super.call("isControllable", "isControllable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isControllable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isControllable", "isControllable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isIssuable(): boolean {
    let result = super.call("isIssuable", "isIssuable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isIssuable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isIssuable", "isIssuable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(account: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(operator: Address, tokenHolder: Address): boolean {
    let result = super.call(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperator(
    operator: Address,
    tokenHolder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(address,address):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperatorForPartition(
    partition: Bytes,
    operator: Address,
    tokenHolder: Address
  ): boolean {
    let result = super.call(
      "isOperatorForPartition",
      "isOperatorForPartition(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );

    return result[0].toBoolean();
  }

  try_isOperatorForPartition(
    partition: Bytes,
    operator: Address,
    tokenHolder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorForPartition",
      "isOperatorForPartition(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(tokenHolder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  operatorTransferByPartition(
    partition: Bytes,
    from: Address,
    to: Address,
    value: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): Bytes {
    let result = super.call(
      "operatorTransferByPartition",
      "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );

    return result[0].toBytes();
  }

  try_operatorTransferByPartition(
    partition: Bytes,
    from: Address,
    to: Address,
    value: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "operatorTransferByPartition",
      "operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  partitionsOf(tokenHolder: Address): Array<Bytes> {
    let result = super.call(
      "partitionsOf",
      "partitionsOf(address):(bytes32[])",
      [ethereum.Value.fromAddress(tokenHolder)]
    );

    return result[0].toBytesArray();
  }

  try_partitionsOf(tokenHolder: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "partitionsOf",
      "partitionsOf(address):(bytes32[])",
      [ethereum.Value.fromAddress(tokenHolder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPartitions(): Array<Bytes> {
    let result = super.call(
      "totalPartitions",
      "totalPartitions():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_totalPartitions(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "totalPartitions",
      "totalPartitions():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyByPartition(partition: Bytes): BigInt {
    let result = super.call(
      "totalSupplyByPartition",
      "totalSupplyByPartition(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(partition)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyByPartition(partition: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyByPartition",
      "totalSupplyByPartition(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(partition)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferByPartition(
    partition: Bytes,
    to: Address,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "transferByPartition",
      "transferByPartition(bytes32,address,uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_transferByPartition(
    partition: Bytes,
    to: Address,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "transferByPartition",
      "transferByPartition(bytes32,address,uint256,bytes):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(partition),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get orgnr(): string {
    return this._call.inputValues[1].value.toString();
  }

  get granularity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get controllers(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get defaultPartitions(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get capTableRegistry(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveByPartitionCall extends ethereum.Call {
  get inputs(): ApproveByPartitionCall__Inputs {
    return new ApproveByPartitionCall__Inputs(this);
  }

  get outputs(): ApproveByPartitionCall__Outputs {
    return new ApproveByPartitionCall__Outputs(this);
  }
}

export class ApproveByPartitionCall__Inputs {
  _call: ApproveByPartitionCall;

  constructor(call: ApproveByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveByPartitionCall__Outputs {
  _call: ApproveByPartitionCall;

  constructor(call: ApproveByPartitionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AuthorizeOperatorCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorCall__Inputs {
    return new AuthorizeOperatorCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorCall__Outputs {
    return new AuthorizeOperatorCall__Outputs(this);
  }
}

export class AuthorizeOperatorCall__Inputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeOperatorCall__Outputs {
  _call: AuthorizeOperatorCall;

  constructor(call: AuthorizeOperatorCall) {
    this._call = call;
  }
}

export class AuthorizeOperatorByPartitionCall extends ethereum.Call {
  get inputs(): AuthorizeOperatorByPartitionCall__Inputs {
    return new AuthorizeOperatorByPartitionCall__Inputs(this);
  }

  get outputs(): AuthorizeOperatorByPartitionCall__Outputs {
    return new AuthorizeOperatorByPartitionCall__Outputs(this);
  }
}

export class AuthorizeOperatorByPartitionCall__Inputs {
  _call: AuthorizeOperatorByPartitionCall;

  constructor(call: AuthorizeOperatorByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AuthorizeOperatorByPartitionCall__Outputs {
  _call: AuthorizeOperatorByPartitionCall;

  constructor(call: AuthorizeOperatorByPartitionCall) {
    this._call = call;
  }
}

export class DomainSeparatorCall extends ethereum.Call {
  get inputs(): DomainSeparatorCall__Inputs {
    return new DomainSeparatorCall__Inputs(this);
  }

  get outputs(): DomainSeparatorCall__Outputs {
    return new DomainSeparatorCall__Outputs(this);
  }
}

export class DomainSeparatorCall__Inputs {
  _call: DomainSeparatorCall;

  constructor(call: DomainSeparatorCall) {
    this._call = call;
  }
}

export class DomainSeparatorCall__Outputs {
  _call: DomainSeparatorCall;

  constructor(call: DomainSeparatorCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get tokenHolder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class IssueByPartitionCall extends ethereum.Call {
  get inputs(): IssueByPartitionCall__Inputs {
    return new IssueByPartitionCall__Inputs(this);
  }

  get outputs(): IssueByPartitionCall__Outputs {
    return new IssueByPartitionCall__Outputs(this);
  }
}

export class IssueByPartitionCall__Inputs {
  _call: IssueByPartitionCall;

  constructor(call: IssueByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenHolder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class IssueByPartitionCall__Outputs {
  _call: IssueByPartitionCall;

  constructor(call: IssueByPartitionCall) {
    this._call = call;
  }
}

export class Kapitalforhoyselse_nye_aksjerCall extends ethereum.Call {
  get inputs(): Kapitalforhoyselse_nye_aksjerCall__Inputs {
    return new Kapitalforhoyselse_nye_aksjerCall__Inputs(this);
  }

  get outputs(): Kapitalforhoyselse_nye_aksjerCall__Outputs {
    return new Kapitalforhoyselse_nye_aksjerCall__Outputs(this);
  }
}

export class Kapitalforhoyselse_nye_aksjerCall__Inputs {
  _call: Kapitalforhoyselse_nye_aksjerCall;

  constructor(call: Kapitalforhoyselse_nye_aksjerCall) {
    this._call = call;
  }

  get partition(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class Kapitalforhoyselse_nye_aksjerCall__Outputs {
  _call: Kapitalforhoyselse_nye_aksjerCall;

  constructor(call: Kapitalforhoyselse_nye_aksjerCall) {
    this._call = call;
  }
}

export class Kapitalnedsettelse_reduksjon_aksjerCall extends ethereum.Call {
  get inputs(): Kapitalnedsettelse_reduksjon_aksjerCall__Inputs {
    return new Kapitalnedsettelse_reduksjon_aksjerCall__Inputs(this);
  }

  get outputs(): Kapitalnedsettelse_reduksjon_aksjerCall__Outputs {
    return new Kapitalnedsettelse_reduksjon_aksjerCall__Outputs(this);
  }
}

export class Kapitalnedsettelse_reduksjon_aksjerCall__Inputs {
  _call: Kapitalnedsettelse_reduksjon_aksjerCall;

  constructor(call: Kapitalnedsettelse_reduksjon_aksjerCall) {
    this._call = call;
  }

  get partition(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get from(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class Kapitalnedsettelse_reduksjon_aksjerCall__Outputs {
  _call: Kapitalnedsettelse_reduksjon_aksjerCall;

  constructor(call: Kapitalnedsettelse_reduksjon_aksjerCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get newContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get definitive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class OperatorRedeemByPartitionCall extends ethereum.Call {
  get inputs(): OperatorRedeemByPartitionCall__Inputs {
    return new OperatorRedeemByPartitionCall__Inputs(this);
  }

  get outputs(): OperatorRedeemByPartitionCall__Outputs {
    return new OperatorRedeemByPartitionCall__Outputs(this);
  }
}

export class OperatorRedeemByPartitionCall__Inputs {
  _call: OperatorRedeemByPartitionCall;

  constructor(call: OperatorRedeemByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenHolder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OperatorRedeemByPartitionCall__Outputs {
  _call: OperatorRedeemByPartitionCall;

  constructor(call: OperatorRedeemByPartitionCall) {
    this._call = call;
  }
}

export class OperatorTransferByPartitionCall extends ethereum.Call {
  get inputs(): OperatorTransferByPartitionCall__Inputs {
    return new OperatorTransferByPartitionCall__Inputs(this);
  }

  get outputs(): OperatorTransferByPartitionCall__Outputs {
    return new OperatorTransferByPartitionCall__Outputs(this);
  }
}

export class OperatorTransferByPartitionCall__Inputs {
  _call: OperatorTransferByPartitionCall;

  constructor(call: OperatorTransferByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class OperatorTransferByPartitionCall__Outputs {
  _call: OperatorTransferByPartitionCall;

  constructor(call: OperatorTransferByPartitionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemByPartitionCall extends ethereum.Call {
  get inputs(): RedeemByPartitionCall__Inputs {
    return new RedeemByPartitionCall__Inputs(this);
  }

  get outputs(): RedeemByPartitionCall__Outputs {
    return new RedeemByPartitionCall__Outputs(this);
  }
}

export class RedeemByPartitionCall__Inputs {
  _call: RedeemByPartitionCall;

  constructor(call: RedeemByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RedeemByPartitionCall__Outputs {
  _call: RedeemByPartitionCall;

  constructor(call: RedeemByPartitionCall) {
    this._call = call;
  }
}

export class RedeemFromCall extends ethereum.Call {
  get inputs(): RedeemFromCall__Inputs {
    return new RedeemFromCall__Inputs(this);
  }

  get outputs(): RedeemFromCall__Outputs {
    return new RedeemFromCall__Outputs(this);
  }
}

export class RedeemFromCall__Inputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RedeemFromCall__Outputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }
}

export class RemoveDocumentCall extends ethereum.Call {
  get inputs(): RemoveDocumentCall__Inputs {
    return new RemoveDocumentCall__Inputs(this);
  }

  get outputs(): RemoveDocumentCall__Outputs {
    return new RemoveDocumentCall__Outputs(this);
  }
}

export class RemoveDocumentCall__Inputs {
  _call: RemoveDocumentCall;

  constructor(call: RemoveDocumentCall) {
    this._call = call;
  }

  get documentName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveDocumentCall__Outputs {
  _call: RemoveDocumentCall;

  constructor(call: RemoveDocumentCall) {
    this._call = call;
  }
}

export class RemoveMinterCall extends ethereum.Call {
  get inputs(): RemoveMinterCall__Inputs {
    return new RemoveMinterCall__Inputs(this);
  }

  get outputs(): RemoveMinterCall__Outputs {
    return new RemoveMinterCall__Outputs(this);
  }
}

export class RemoveMinterCall__Inputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMinterCall__Outputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }
}

export class RenounceControlCall extends ethereum.Call {
  get inputs(): RenounceControlCall__Inputs {
    return new RenounceControlCall__Inputs(this);
  }

  get outputs(): RenounceControlCall__Outputs {
    return new RenounceControlCall__Outputs(this);
  }
}

export class RenounceControlCall__Inputs {
  _call: RenounceControlCall;

  constructor(call: RenounceControlCall) {
    this._call = call;
  }
}

export class RenounceControlCall__Outputs {
  _call: RenounceControlCall;

  constructor(call: RenounceControlCall) {
    this._call = call;
  }
}

export class RenounceIssuanceCall extends ethereum.Call {
  get inputs(): RenounceIssuanceCall__Inputs {
    return new RenounceIssuanceCall__Inputs(this);
  }

  get outputs(): RenounceIssuanceCall__Outputs {
    return new RenounceIssuanceCall__Outputs(this);
  }
}

export class RenounceIssuanceCall__Inputs {
  _call: RenounceIssuanceCall;

  constructor(call: RenounceIssuanceCall) {
    this._call = call;
  }
}

export class RenounceIssuanceCall__Outputs {
  _call: RenounceIssuanceCall;

  constructor(call: RenounceIssuanceCall) {
    this._call = call;
  }
}

export class RenounceMinterCall extends ethereum.Call {
  get inputs(): RenounceMinterCall__Inputs {
    return new RenounceMinterCall__Inputs(this);
  }

  get outputs(): RenounceMinterCall__Outputs {
    return new RenounceMinterCall__Outputs(this);
  }
}

export class RenounceMinterCall__Inputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceMinterCall__Outputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class RevokeOperatorByPartitionCall extends ethereum.Call {
  get inputs(): RevokeOperatorByPartitionCall__Inputs {
    return new RevokeOperatorByPartitionCall__Inputs(this);
  }

  get outputs(): RevokeOperatorByPartitionCall__Outputs {
    return new RevokeOperatorByPartitionCall__Outputs(this);
  }
}

export class RevokeOperatorByPartitionCall__Inputs {
  _call: RevokeOperatorByPartitionCall;

  constructor(call: RevokeOperatorByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeOperatorByPartitionCall__Outputs {
  _call: RevokeOperatorByPartitionCall;

  constructor(call: RevokeOperatorByPartitionCall) {
    this._call = call;
  }
}

export class SetCapTableRegistryCall extends ethereum.Call {
  get inputs(): SetCapTableRegistryCall__Inputs {
    return new SetCapTableRegistryCall__Inputs(this);
  }

  get outputs(): SetCapTableRegistryCall__Outputs {
    return new SetCapTableRegistryCall__Outputs(this);
  }
}

export class SetCapTableRegistryCall__Inputs {
  _call: SetCapTableRegistryCall;

  constructor(call: SetCapTableRegistryCall) {
    this._call = call;
  }

  get capTableRegistryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCapTableRegistryCall__Outputs {
  _call: SetCapTableRegistryCall;

  constructor(call: SetCapTableRegistryCall) {
    this._call = call;
  }
}

export class SetControllersCall extends ethereum.Call {
  get inputs(): SetControllersCall__Inputs {
    return new SetControllersCall__Inputs(this);
  }

  get outputs(): SetControllersCall__Outputs {
    return new SetControllersCall__Outputs(this);
  }
}

export class SetControllersCall__Inputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }

  get operators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetControllersCall__Outputs {
  _call: SetControllersCall;

  constructor(call: SetControllersCall) {
    this._call = call;
  }
}

export class SetDefaultPartitionsCall extends ethereum.Call {
  get inputs(): SetDefaultPartitionsCall__Inputs {
    return new SetDefaultPartitionsCall__Inputs(this);
  }

  get outputs(): SetDefaultPartitionsCall__Outputs {
    return new SetDefaultPartitionsCall__Outputs(this);
  }
}

export class SetDefaultPartitionsCall__Inputs {
  _call: SetDefaultPartitionsCall;

  constructor(call: SetDefaultPartitionsCall) {
    this._call = call;
  }

  get partitions(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class SetDefaultPartitionsCall__Outputs {
  _call: SetDefaultPartitionsCall;

  constructor(call: SetDefaultPartitionsCall) {
    this._call = call;
  }
}

export class SetDocumentCall extends ethereum.Call {
  get inputs(): SetDocumentCall__Inputs {
    return new SetDocumentCall__Inputs(this);
  }

  get outputs(): SetDocumentCall__Outputs {
    return new SetDocumentCall__Outputs(this);
  }
}

export class SetDocumentCall__Inputs {
  _call: SetDocumentCall;

  constructor(call: SetDocumentCall) {
    this._call = call;
  }

  get documentName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get documentHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetDocumentCall__Outputs {
  _call: SetDocumentCall;

  constructor(call: SetDocumentCall) {
    this._call = call;
  }
}

export class SetPartitionControllersCall extends ethereum.Call {
  get inputs(): SetPartitionControllersCall__Inputs {
    return new SetPartitionControllersCall__Inputs(this);
  }

  get outputs(): SetPartitionControllersCall__Outputs {
    return new SetPartitionControllersCall__Outputs(this);
  }
}

export class SetPartitionControllersCall__Inputs {
  _call: SetPartitionControllersCall;

  constructor(call: SetPartitionControllersCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get operators(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetPartitionControllersCall__Outputs {
  _call: SetPartitionControllersCall;

  constructor(call: SetPartitionControllersCall) {
    this._call = call;
  }
}

export class SetTokenExtensionCall extends ethereum.Call {
  get inputs(): SetTokenExtensionCall__Inputs {
    return new SetTokenExtensionCall__Inputs(this);
  }

  get outputs(): SetTokenExtensionCall__Outputs {
    return new SetTokenExtensionCall__Outputs(this);
  }
}

export class SetTokenExtensionCall__Inputs {
  _call: SetTokenExtensionCall;

  constructor(call: SetTokenExtensionCall) {
    this._call = call;
  }

  get extension(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get interfaceLabel(): string {
    return this._call.inputValues[1].value.toString();
  }

  get removeOldExtensionRoles(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get addMinterRoleForExtension(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get addControllerRoleForExtension(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetTokenExtensionCall__Outputs {
  _call: SetTokenExtensionCall;

  constructor(call: SetTokenExtensionCall) {
    this._call = call;
  }
}

export class SpleisCall extends ethereum.Call {
  get inputs(): SpleisCall__Inputs {
    return new SpleisCall__Inputs(this);
  }

  get outputs(): SpleisCall__Outputs {
    return new SpleisCall__Outputs(this);
  }
}

export class SpleisCall__Inputs {
  _call: SpleisCall;

  constructor(call: SpleisCall) {
    this._call = call;
  }

  get partition(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get from(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SpleisCall__Outputs {
  _call: SpleisCall;

  constructor(call: SpleisCall) {
    this._call = call;
  }
}

export class SplittCall extends ethereum.Call {
  get inputs(): SplittCall__Inputs {
    return new SplittCall__Inputs(this);
  }

  get outputs(): SplittCall__Outputs {
    return new SplittCall__Outputs(this);
  }
}

export class SplittCall__Inputs {
  _call: SplittCall;

  constructor(call: SplittCall) {
    this._call = call;
  }

  get partition(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get value(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SplittCall__Outputs {
  _call: SplittCall;

  constructor(call: SplittCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferByPartitionCall extends ethereum.Call {
  get inputs(): TransferByPartitionCall__Inputs {
    return new TransferByPartitionCall__Inputs(this);
  }

  get outputs(): TransferByPartitionCall__Outputs {
    return new TransferByPartitionCall__Outputs(this);
  }
}

export class TransferByPartitionCall__Inputs {
  _call: TransferByPartitionCall;

  constructor(call: TransferByPartitionCall) {
    this._call = call;
  }

  get partition(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferByPartitionCall__Outputs {
  _call: TransferByPartitionCall;

  constructor(call: TransferByPartitionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromWithDataCall extends ethereum.Call {
  get inputs(): TransferFromWithDataCall__Inputs {
    return new TransferFromWithDataCall__Inputs(this);
  }

  get outputs(): TransferFromWithDataCall__Outputs {
    return new TransferFromWithDataCall__Outputs(this);
  }
}

export class TransferFromWithDataCall__Inputs {
  _call: TransferFromWithDataCall;

  constructor(call: TransferFromWithDataCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TransferFromWithDataCall__Outputs {
  _call: TransferFromWithDataCall;

  constructor(call: TransferFromWithDataCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferWithDataCall extends ethereum.Call {
  get inputs(): TransferWithDataCall__Inputs {
    return new TransferWithDataCall__Inputs(this);
  }

  get outputs(): TransferWithDataCall__Outputs {
    return new TransferWithDataCall__Outputs(this);
  }
}

export class TransferWithDataCall__Inputs {
  _call: TransferWithDataCall;

  constructor(call: TransferWithDataCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TransferWithDataCall__Outputs {
  _call: TransferWithDataCall;

  constructor(call: TransferWithDataCall) {
    this._call = call;
  }
}

export class UpdateFagsystemCall extends ethereum.Call {
  get inputs(): UpdateFagsystemCall__Inputs {
    return new UpdateFagsystemCall__Inputs(this);
  }

  get outputs(): UpdateFagsystemCall__Outputs {
    return new UpdateFagsystemCall__Outputs(this);
  }
}

export class UpdateFagsystemCall__Inputs {
  _call: UpdateFagsystemCall;

  constructor(call: UpdateFagsystemCall) {
    this._call = call;
  }
}

export class UpdateFagsystemCall__Outputs {
  _call: UpdateFagsystemCall;

  constructor(call: UpdateFagsystemCall) {
    this._call = call;
  }
}
